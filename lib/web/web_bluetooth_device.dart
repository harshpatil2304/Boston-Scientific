part of "../js_web_bluetooth.dart";

///
/// A class for calling methods and values for a [BluetoothDevice].
///
/// You can get a [WebBluetoothDevice] by calling [Bluetooth.requestDevice].
///
/// See:
///
/// - [Bluetooth]
///
/// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice
///
/// - https://webbluetoothcg.github.io/web-bluetooth/#bluetoothdevice-interface
///
class WebBluetoothDevice {
  final Object _jsObject;

  String? _id;

  ///
  /// Get the id of the device.
  ///
  /// This id is randomly generated by the browser. A new id is generated for
  /// each session unless a flag is used to remember previously connected
  /// devices.
  ///
  /// The browser may decide how this is generated. On Chrome this is 128
  /// randomly generated bits that are encoded in base 64.
  ///
  /// See:
  ///
  /// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/id
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-id
  ///
  String get id {
    var id = _id;
    if (id != null) {
      return id;
    }
    id = _JSUtil.getProperty(_jsObject, "id") as String;
    _id = id;
    return id;
  }

  String? _name;

  ///
  /// A human readable name of the device.
  ///
  /// This name comes straight from the device itself.
  ///
  /// See:
  ///
  /// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/name
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-name
  ///
  String? get name {
    var name = _name;
    if (name != null) {
      return name;
    }
    if (!_JSUtil.hasProperty(_jsObject, "name")) {
      return null;
    }
    name = _JSUtil.getProperty(_jsObject, "name") as String?;
    _name = name;
    return name;
  }

  NativeBluetoothRemoteGATTServer? _gatt;

  ///
  /// Get a reference to the [NativeBluetoothRemoteGATTServer] to communicate
  /// with the [WebBluetoothRemoteGATTService]s.
  ///
  /// Some devices may allow you to find them, but they are on a blocklist
  /// restricting the ability to communicate with its GATT service. In this
  /// case the returned value will be `null`.
  ///
  /// See:
  ///
  /// - https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice/gatt
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-gatt
  ///
  NativeBluetoothRemoteGATTServer? get gatt {
    final gatt = _gatt;
    if (gatt != null) {
      return gatt;
    }
    if (!_JSUtil.hasProperty(_jsObject, "gatt")) {
      return null;
    }
    final newGatt = _JSUtil.getProperty(_jsObject, "gatt");
    if (newGatt != null) {
      try {
        _gatt = NativeBluetoothRemoteGATTServer.fromJSObject(newGatt, this);
      } catch (e, stack) {
        if (e is UnsupportedError) {
          webBluetoothLogger.severe(
              "Could not convert gatt to BluetoothRemoteGattServer", e, stack);
        } else {
          rethrow;
        }
      }
    }
    return _gatt;
  }

  ///
  /// Start watching for advertisements. The advertisements will be received
  /// on the `advertisementreceived` event. See [WebAdvertisementReceivedEvent]
  /// for the object that is emitted every time the event fires.
  ///
  /// Not very browser has this implemented yet without the
  /// `enable-experimental-web-platform-features` flag enabled.
  /// So use [hasWatchAdvertisements] or it will throw an
  /// [NativeAPINotImplementedError].
  ///
  /// If you want to stop watching for advertisements then you will need to call
  /// this method again and with a [WatchAdvertisementsOptions.signal] that has
  /// already been aborted. If you do this then the method will throw a
  /// DOMException that you will need to handle.
  ///
  /// Example of the exception is: `DOMException: Failed to execute
  /// 'watchAdvertisements' on 'BluetoothDevice': The Bluetooth operation was cancelled.`
  ///
  Future<void> watchAdvertisements(
      [final WatchAdvertisementsOptions? options]) async {
    if (!hasWatchAdvertisements()) {
      throw NativeAPINotImplementedError("watchAdvertisements");
    }
    if (options == null) {
      await _JSUtil.promiseToFuture(
          _JSUtil.callMethod(_jsObject, "watchAdvertisements", []));
    } else {
      await _JSUtil.promiseToFuture(
          _JSUtil.callMethod(_jsObject, "watchAdvertisements", [options]));
    }
  }

  ///
  /// Check to see if the current browser has the watch advertisements method
  /// implemented
  ///
  bool hasWatchAdvertisements() =>
      _JSUtil.hasProperty(_jsObject, "watchAdvertisements");

  ///
  /// Forget the device. This means that the device will be forgotten by the
  /// browser and no longer shows up in [Bluetooth.getDevices].
  ///
  /// Once forget has been called you won't be able to communicate with the
  /// device anymore.
  ///
  /// May throw:
  ///
  /// - [NativeAPINotImplementedError] if the user agent doesn't have the
  ///   forget method. Use [hasForget] to mitigate this.
  ///
  /// **NOTE:** Calling forget on a device retrieved via
  /// [Bluetooth.requestLEScan] will cause chrome to crash
  /// (last tested on 2022-12-23).
  ///
  /// **NOTE:** Forgetting a device twice will cause chrome to crash
  /// (last tested on 2022-12-23).
  ///
  /// See:
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#dom-bluetoothdevice-forget
  ///
  Future<void> forget() async {
    if (!hasForget) {
      throw NativeAPINotImplementedError("forget");
    }
    await _JSUtil.promiseToFuture(_JSUtil.callMethod(_jsObject, "forget", []));
  }

  ///
  /// Check to see if the browser/ user agent has the forget method.
  ///
  bool get hasForget => _JSUtil.hasProperty(_jsObject, "forget");

  ///
  /// If the device is watching for advertisements.
  /// If advertisements are not unsupported then it will always return `false`.
  ///
  bool get watchingAdvertisements =>
      _JSUtil.getProperty(_jsObject, "watchingAdvertisements") as bool? ??
      false;

  ///
  /// Add a new event listener to the device.
  ///
  /// Marking the method with [JSUtils.allowInterop] will be done automatically
  /// for you.
  ///
  /// Events to be handled are:
  ///
  /// - onadvertisementreceived
  ///
  /// - ongattserverdisconnected
  ///
  /// - onserviceadded
  ///
  /// - onservicechanged
  ///
  /// - onserviceremoved
  ///
  /// - oncharacteristicvaluechanged
  ///
  /// See:
  ///
  /// - [removeEventListener]
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#bluetoothdeviceeventhandlers
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#serviceeventhandlers
  ///
  /// - https://webbluetoothcg.github.io/web-bluetooth/#characteristiceventhandlers
  ///
  void addEventListener(
      final String type, final void Function(dynamic) listener) {
    _JSUtil.callMethod(
        _jsObject, "addEventListener", [type, _JSUtil.allowInterop(listener)]);
  }

  ///
  /// Remove an event listener that has previously been added.
  ///
  /// Marking the method with [JSUtils.allowInterop] will be done automatically
  /// for you.
  ///
  /// See: [addEventListener].
  ///
  void removeEventListener(
      final String type, final void Function(dynamic) listener) {
    /// TODO: may need to tell the developer to store the listener that you get
    /// after throwing it through _JSUtil.allowInterop.
    _JSUtil.callMethod(_jsObject, "removeEventListener",
        [type, _JSUtil.allowInterop(listener)]);
  }

  ///
  /// Create a new instance from a js object.
  ///
  /// **This should only be done by the library or if you're testing.**
  ///
  /// To get an instance use [Bluetooth.requestDevice].
  ///
  WebBluetoothDevice.fromJSObject(this._jsObject) {
    if (!_JSUtil.hasProperty(_jsObject, "id")) {
      throw UnsupportedError("JSObject does not have an id.");
    }
  }

  ///
  /// Create a new instance form an `advertisementreceived` event.
  ///
  /// **This should only be done by the library of if you're testing.**
  ///
  /// To get an instance use [Bluetooth.requestDevice].
  ///
  factory WebBluetoothDevice.fromEvent(final Object event) =>
      WebBluetoothDevice.fromJSObject(_JSUtil.getProperty(event, "device"));
}

///
/// The options to configure the [WebBluetoothDevice.watchAdvertisements]
/// method.
///
/// The only option that this object has right now is [signal] which can be
/// used to abort watching for advertisements.
///
@JS()
@anonymous
class WatchAdvertisementsOptions {
  ///
  /// This signal can be used to abort watching later on in the program.
  ///
  /// See [AbortController] and [AbortSignal] on how to create these signals.
  ///
  external final AbortSignal signal;

  ///
  /// The constructor for the options.
  ///
  external factory WatchAdvertisementsOptions({final AbortSignal signal});
}
